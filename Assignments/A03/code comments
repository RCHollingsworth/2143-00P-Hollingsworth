/***********************************************
* Author:    Professor Griffin
* Commentor: Robert Hollingsworth
* Email :    roberthollingsowrthcca@gmail.com
* Label:     Assignment A04
* Title:     Add clean comments to given code
* Course:    CMPS 2143
* Semester:   Spring 2023
*
* Description: 
***********************************************/
#include <iostream>
using namespace std;

/**
* CircularArrayQue
*
* Description:
*       This class is establishing a queue that holds values
*       and can be manipulated by functions Push and Pop
*
* Private Methods:
*       Void function that initializes queue
*       Bool function that chekcs for a full queue
*       
* Public Methods:
*       A constructor that initializes the size of queue
*       A manipulator that allows us to change the size of queue
*       Void Push function that allows us to add to the queue
*       Int Pop Function that allows us to remove from the queue
*       Overloading an assignment opperator to make queue 
*       manipulation easier to the programmer
*/
class CircularArrayQue {
private:
    int *Container;
    int Front;
    int Rear;
    int QueSize; // items in the queue
    int CurrentSize;
    void init(int size = 0) {
        Front = Rear = CurrentSize = 0;
        QueSize = size;
    }

    bool Full() {
        return CurrentSize == QueSize;
    }

public:
    CircularArrayQue() {
        Container = new int[10];
        init(10);
    }
    CircularArrayQue(int size) {
        Container = new int[size];
        init(size);
    }

    void Push(int item) {
        if (!Full()) {
            Container[Rear] = item;
            Rear = (Rear + 1) % QueSize;
            CurrentSize++;
        } else {
            cout << "FULL!!!!" << endl;
        }
    }

    int Pop() {
        int temp = Container[Front];
        Front = (Front + 1) % QueSize;
        CurrentSize--;
        return temp;
    }
//Allows the overide of the opperator to access private members of the class
    friend ostream &operator<<(ostream &os, const CircularArrayQue &other); 
};

ostream &operator<<(ostream &os, const CircularArrayQue &other) {

    for (int i = other.Front; i < other.CurrentSize; i = (i + 1) % other.QueSize) {
        os << other.Container[i] << " ";
    }
    os << endl;
    return os;
}

/**
 * Main Driver
 * 
 * For this program, the main driver was used to test the CircularArrayQue class
 * 
 */
int main() {
    CircularArrayQue C1(5);

    // C1.Push(34);
    // C1.Push(38);
    // C1.Push(44);
    // C1.Push(22);
    // C1.Push(99);
    // C1.Push(100);

    C1.Push(1);
    C1.Push(2);
    C1.Push(3);
    // C1.Push(6);
    // C1.Push(7);
    cout << C1 << endl;

    // C1.Push(1);
    // C1.Push(2);
    // C1.Push(3);

    cout << C1 << endl;
}
